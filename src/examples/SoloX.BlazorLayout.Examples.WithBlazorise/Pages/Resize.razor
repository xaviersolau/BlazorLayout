@page "/Resize"


@inject IResizeObserverService sizeObserverService

@implements IResizeCallback
@implements IAsyncDisposable

<ResizeContainer @ref="ResizeContainerReference" Fill="Fill.None">
    <BoxContainer Fill="Fill.Full" Class="bg-light panel-container">
        <Heading Style="margin:0px;">
            This card is re-sizable!
        </Heading>
        <Paragraph Style="margin:0px;">
            Its size is @width x @height
        </Paragraph>
    </BoxContainer>

</ResizeContainer>


@code
{
    private ResizeContainer ResizeContainerReference { get; set; } = default!;

    private int width;
    private int height;

    private IAsyncDisposable? callbackDisposable;
    private IAsyncDisposable? observerDisposable;

    private readonly CancellationTokenSource cancelTokenSource = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !this.cancelTokenSource.IsCancellationRequested)
        {
            try
            {
                observerDisposable = await sizeObserverService.RegisterMutationObserverAsync(ResizeContainerReference.ElementReference, this.cancelTokenSource.Token);

                callbackDisposable = await sizeObserverService.RegisterResizeCallbackAsync(this, ResizeContainerReference.ElementReference, this.cancelTokenSource.Token);
            }
            catch (OperationCanceledException)
            {
                // Expected if component is disposed early
            }
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    public ValueTask ResizeAsync(int width, int height)
    {
        this.height = height;
        this.width = width;

        this.StateHasChanged();

        return ValueTask.CompletedTask;
    }

    public async ValueTask DisposeAsync()
    {
        await this.cancelTokenSource.CancelAsync().ConfigureAwait(false);

        if (this.observerDisposable != null)
        {
            await this.observerDisposable.DisposeAsync();
            this.observerDisposable = null;
        }

        if (this.callbackDisposable != null)
        {
            await callbackDisposable.DisposeAsync();
            this.callbackDisposable = null;
        }

        this.cancelTokenSource.Dispose();
    }
}