@page "/ResizeCallback"


@inject IResizeObserverService sizeObserverService

@implements IResizeCallback
@implements IAsyncDisposable

<BoxContainer @ref="ContainerReference" Fill="Fill.Full">
    <BoxContainer Fill="Fill.Full">
        <FluentCard MinimalStyle="true">
            <FluentLabel Typo="Typography.H1">
                Let's register a resize callback!
            </FluentLabel>
            <p Style="margin:0px;">
                Its size is @width x @height
            </p>
        </FluentCard>
    </BoxContainer>

</BoxContainer>


@code
{
    private BoxContainer ContainerReference { get; set; }

    private int width;
    private int height;

    private IAsyncDisposable callbackDisposable;

    private readonly CancellationTokenSource cancelTokenSource = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !this.cancelTokenSource.IsCancellationRequested)
        {
            try
            {
                callbackDisposable = await sizeObserverService.RegisterResizeCallbackAsync(this, ContainerReference.ElementReference, this.cancelTokenSource.Token);
            }
            catch (OperationCanceledException)
            {
                // Expected if component is disposed early
            }
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    public ValueTask ResizeAsync(int width, int height)
    {
        this.height = height;
        this.width = width;

        this.StateHasChanged();

        return ValueTask.CompletedTask;
    }

    public async ValueTask DisposeAsync()
    {
        await this.cancelTokenSource.CancelAsync().ConfigureAwait(false);

        if (this.callbackDisposable != null)
        {
            await callbackDisposable.DisposeAsync();
            this.callbackDisposable = null;
        }

        this.cancelTokenSource.Dispose();
    }
}